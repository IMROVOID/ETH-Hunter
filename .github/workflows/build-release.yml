# FILE: .github/workflows/build-release.yml

name: Build and Release Cross-Platform

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The tag to build (e.g., v1.0.0). This will be used for naming and the release.'
        required: true
        type: string

permissions:
  contents: write

jobs:
  # JOB 1: Build the application for Windows
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows release
        run: flutter build windows --release

      - name: Set Version Name
        id: set_version
        run: |
          if ("${{ github.event.inputs.tag_name }}") {
            echo "version=${{ github.event.inputs.tag_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            echo "version=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
        shell: pwsh

      - name: Structure Portable Build
        shell: pwsh
        run: |
          $portableDir = "ETH-Hunter-${{ steps.set_version.outputs.version }}-Windows-Portable"
          New-Item -ItemType Directory -Force -Path $portableDir
          Copy-Item -Path build/windows/x64/runner/Release/* -Destination $portableDir -Recurse
          Compress-Archive -Path $portableDir -DestinationPath "$portableDir.zip"

      - name: Download and Install Inno Setup
        shell: pwsh
        run: |
          # Download and run the installer silently
          Invoke-WebRequest -Uri "https://files.jrsoftware.org/is/6/innosetup-6.2.2.exe" -OutFile "inno_setup.exe"
          Start-Process -FilePath "inno_setup.exe" -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
          
          # FIX: Add Inno Setup compiler to the GitHub Actions path for subsequent steps
          echo "${env:ProgramFiles(x86)}\Inno Setup 6" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Copy Icon for Installer
        run: Copy-Item -Path assets/icons/app.ico -Destination build/windows/x64/runner/Release/app.ico

      - name: Build Installer
        shell: pwsh
        run: |
          $versionTag = "${{ steps.set_version.outputs.version }}"
          $appVersion = $versionTag.Substring(1) # Removes the 'v'
          
          # FIXED: Call iscc.exe directly now that its location is in the PATH
          iscc.exe "build-scripts/inno-setup.iss" `
            /DProjectRoot="${{ github.workspace }}" `
            /DAppVersion=$appVersion `
            /O"installer-output" `
            /F"ETH-Hunter-$versionTag-Windows-Setup"

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            ETH-Hunter-${{ steps.set_version.outputs.version }}-Windows-Portable.zip
            installer-output/ETH-Hunter-${{ steps.set_version.outputs.version }}-Windows-Setup.exe

  # JOB 2: Build the application for Linux
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      - name: Install Linux dependencies
        run: sudo apt-get update && sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev zip

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux release
        run: flutter build linux --release

      - name: Set Version Name
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Structure and Package Linux build
        run: |
          portableDir="ETH-Hunter-${{ steps.set_version.outputs.version }}-Linux-Portable"
          mkdir -p $portableDir
          cp -r build/linux/x64/release/bundle/* $portableDir/
          zip -r "$portableDir.zip" $portableDir

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: ETH-Hunter-${{ steps.set_version.outputs.version }}-Linux-Portable.zip

  # JOB 3: Build the application for macOS
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS release
        run: flutter build macos --release

      - name: Set Version Name
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create DMG (Installer)
        run: |
          create-dmg \
            "ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS.dmg" \
            "build/macos/Build/Products/Release/eth_hunter.app"

      - name: Create ZIP (Portable)
        run: |
          zip -r "ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS-Portable.zip" "build/macos/Build/Products/Release/eth_hunter.app"

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS.dmg
            ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS-Portable.zip

  # JOB 4: Create the final GitHub Release
  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Set Version Name
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_version.outputs.version }}
          draft: true
          append_body: true
          files: |
            release-artifacts/windows-build/*.zip
            release-artifacts/windows-build/*.exe
            release-artifacts/linux-build/*.zip
            release-artifacts/macos-build/*.zip
            release-artifacts/macos-build/*.dmg
