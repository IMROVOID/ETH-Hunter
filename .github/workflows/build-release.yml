# FILE: .github/workflows/build-release.yml

name: Build and Release Cross-Platform

# This workflow is triggered in two ways:
# 1. Automatically when a new tag matching 'v*.*.*' is pushed.
# 2. Manually from the Actions tab in your GitHub repository.
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'The tag to build (e.g., v1.0.0). This will be used for naming and the release.'
        required: true
        type: string

# This permission is required for the final job to create a GitHub Release.
permissions:
  contents: write

jobs:
  # JOB 1: Build the application for Windows
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows release
        run: flutter build windows --release

      # Determine the version name from the trigger type (manual vs. tag)
      - name: Set Version Name
        id: set_version
        run: |
          if ("${{ github.event.inputs.tag_name }}") {
            echo "version=${{ github.event.inputs.tag_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          } else {
            echo "version=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          }
        shell: pwsh
      
      # Package the build output into a portable .zip file
      - name: Package Windows build
        run: |
          # CORRECTED PATH: Added '/x64' to correctly locate the build output.
          Compress-Archive -Path build/windows/x64/runner/Release -DestinationPath "ETH-Hunter-${{ steps.set_version.outputs.version }}-Windows-Portable.zip"
        shell: pwsh

      # Upload the packaged file as an artifact for the final release job
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: ETH-Hunter-${{ steps.set_version.outputs.version }}-Windows-Portable.zip

  # JOB 2: Build the application for Linux
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      # Install necessary Linux build dependencies
      - name: Install Linux dependencies
        run: sudo apt-get update && sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev zip

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux release
        run: flutter build linux --release

      - name: Set Version Name
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      # Package the build output ('bundle' directory) into a portable .zip file
      - name: Package Linux build
        run: |
          # CORRECTED COMMAND: Creates the zip file in the root directory for consistency.
          zip -r "ETH-Hunter-${{ steps.set_version.outputs.version }}-Linux-Portable.zip" build/linux/x64/release/bundle
          
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          # CORRECTED PATH: Points to the zip file created in the root directory.
          path: ETH-Hunter-${{ steps.set_version.outputs.version }}-Linux-Portable.zip

  # JOB 3: Build the application for macOS
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag_name || github.ref }}

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS release
        run: flutter build macos --release

      - name: Set Version Name
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      
      # Install the tool used to create .dmg installers
      - name: Install create-dmg
        run: brew install create-dmg

      # Package the build as a .dmg file
      - name: Create DMG
        run: |
          create-dmg \
            "ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS.dmg" \
            "build/macos/Build/Products/Release/eth_hunter.app"

      # Package the build as a .zip file
      - name: Create ZIP
        run: |
          cd build/macos/Build/Products/Release/
          zip -r "ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS.zip" eth_hunter.app
          cd -

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS.dmg
            ETH-Hunter-${{ steps.set_version.outputs.version }}-macOS.zip

  # JOB 4: Create the final GitHub Release
  # This job only runs after all three build jobs have completed successfully.
  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Set Version Name
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
          
      # Download all the packaged files from the build jobs
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      # Create a single release and upload all artifacts to it
      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.set_version.outputs.version }}
          draft: true
          body: "Full cross-platform release of ETH Hunter."
          files: |
            release-artifacts/windows-build/*.zip
            release-artifacts/linux-build/*.zip
            release-artifacts/macos-build/*.zip
            release-artifacts/macos-build/*.dmg
