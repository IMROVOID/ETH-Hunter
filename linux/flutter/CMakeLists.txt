# This file is generated by Flutter. It is not intended to be modified manually.
cmake_minimum_required(VERSION 3.10)

# The following variables are passed from the Flutter tool.
# FLUTTER_ROOT
# FLUTTER_APPLICATION_PATH
# FLUTTER_TARGET_PLATFORM
# FLUTTER_TOOL_ENVIRONMENT
# DART_DEFINES

# Unset parameters that are not used on this platform.
unset(FLUTTER_BUILD_TYPE)
unset(FLUTTER_TARGET_ABI)

# Set the project name.
project(flutter)

# === Flutter Library (Interface) ===
# The Flutter tool builds the Flutter library and places it in a known
# location, so this CMake script simply needs to link against it.
set(FLUTTER_LIBRARY "${CMAKE_BINARY_DIR}/libflutter_linux_gtk.so")
set(FLUTTER_LIBRARY_HEADERS_DIR "${FLUTTER_ROOT}/headers")
set(FLUTTER_ICU_DATA_FILE "${FLUTTER_ROOT}/icudtl.dat")

add_library(flutter INTERFACE)

target_include_directories(flutter INTERFACE
  "${FLUTTER_LIBRARY_HEADERS_DIR}"
)
target_link_libraries(flutter INTERFACE "${FLUTTER_LIBRARY}")

# Set engine-level definitions.
target_compile_definitions(flutter INTERFACE "FLUTTER_GTK_SINK")

# Published to parent scope for install step.
set(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)
set(FLUTTER_ICU_DATA_FILE ${FLUTTER_ICU_DATA_FILE} PARENT_SCOPE)

# === Flutter Tool Backend ===
# The Flutter tool has a build backend that must be invoked.
#
# The backend script is passed:
# 1. The name of the target platform (e.g., "linux-x64").
# 2. The build mode (e.g., "debug").
#
# It is responsible for:
# - Building the AOT snapshot of the application.
# - Copying the Flutter assets to the build directory.
# - Generating the plugin registrant.

# The list of outputs from the Flutter tool.
set(FLUTTER_TOOL_OUTPUTS
  "${FLUTTER_LIBRARY}"
  "${CMAKE_BINARY_DIR}/flutter_assets"
  "${CMAKE_BINARY_DIR}/flutter_plugins.h"
  "${FLUTTER_APPLICATION_PATH}/lib/generated_plugin_registrant.dart"
  "generated_plugin_registrant.cc"
  "generated_plugins.cmake"
)
# The AOT library is only built in Profile and Release modes.
if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
  list(APPEND FLUTTER_TOOL_OUTPUTS "${AOT_LIBRARY}")
  set(AOT_LIBRARY "${CMAKE_BINARY_DIR}/lib/libapp.so" PARENT_SCOPE)
endif()

# _phony_ is a non-existent file to force this command to run every time.
# TODO: Find a way to get a full input/output list from the Flutter tool.
# See: https://github.com/flutter/flutter/issues/51412
set(PHONY_OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/_phony_")
set_source_files_properties("${PHONY_OUTPUT}" PROPERTIES SYMBOLIC TRUE)
add_custom_command(
  OUTPUT ${FLUTTER_TOOL_OUTPUTS} ${PHONY_OUTPUT}
  COMMAND ${CMAKE_COMMAND} -E env
    ${FLUTTER_TOOL_ENVIRONMENT}
    "${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh"
      ${FLUTTER_TARGET_PLATFORM}
      $<CONFIG>
      "DART_DEFINES=${DART_DEFINES}"
      "FLUTTER_ROOT=${FLUTTER_ROOT}"
      "FLUTTER_APPLICATION_PATH=${FLUTTER_APPLICATION_PATH}"
      "FLUTTER_BUILD_DIR=${CMAKE_BINARY_DIR}"
  VERBATIM
)
add_custom_target(flutter_tool_backend DEPENDS ${FLUTTER_TOOL_OUTPUTS})

add_dependencies(flutter flutter_tool_backend)